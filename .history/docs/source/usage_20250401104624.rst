Usage
=====

.. _installation:

Installation
------------

To use astromcad, first install it using pip:

.. code-block:: console

    (.venv) $ pip install astromcad

Using Pretrained Models
-----------------------

.. code-block:: python

   

Custom Models
-------------

To build an anomaly detector on your data, first train a classifier. 

.. code-block:: python

   from utils.load_data import get_data
   from astromcad import build_model, train
        
   X_train, X_val, X_test, host_gal_train, host_gal_val, host_gal_test, y_train, y_val, y_test, class_weights, ntimesteps, x_data_anom, host_gal_anom, y_data_anom = get_data()

   print("Building Model")
   model = build_model(100, ntimesteps, y_train.shape[1], contextual=0, n_features = 4)
   # model = build_model(100, ntimesteps, y_train.shape[1], contextual=2, n_features = 4)
   print(model.summary())
   
   print("Training")
   history = train(model, X_train, y_train, X_val, y_val, class_weights, epochs=40)
   # history = train(model, X_train, host_gal_train, y_train, X_val, host_gal_val, y_val, class_weights, epochs=40)
   
   model.save("Models/NoHostClassifier.h5")
   # model.save("Models/HostClassifier.h5")
   
   print("Model Saved")

Then, initialize the MCIF anomaly detector with the trained classifier.

.. code-block:: python
   y_single = np.array([np.argmax(i) for i in y_train])

   model = load_model("../Models/NoHostClassifier.h5")

   anomaly_detector = mcad(model, 'latent', ['lc'])
   anomaly_detector.create_encoder()
   anomaly_detector.init_mcif(X_train, y_single)

   save('../Models/NoHostMCIF.pickle', anomaly_detector.mcif)


   model = load_model("../Models/HostClassifier.h5")

   anomaly_detector = mcad(model, 'latent', ['lc', 'host'])
   anomaly_detector.create_encoder()
   anomaly_detector.init_mcif([X_train, host_gal_train], y_single)

   save('../Models/HostMCIF.pickle', anomaly_detector.mcif)



